#!/bin/sh
# Init script for logstash
# Maintained by Roberto Rodriguez @Cyb3rWard0g
# Reference: 
# https://github.com/elastic/logstash/blob/master/distribution/rpm/src/main/packaging/init.d/logstash
# https://github.com/spujadas/elk-docker/blob/master/logstash-init

### BEGIN INIT INFO
# Provides:          logstash
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description:
# Description:        Starts Logstash as a daemon.
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME=logstash
DEFAULT=/etc/default/$NAME
export PATH

if [ $(id -u) -ne 0 ]; then
   echo "You need root privileges to run this script"
   exit 1
fi

. /lib/lsb/init-functions

if [ -r /etc/default/rcS ]; then
	. /etc/default/rcS
fi

# The following variables can be overwritten in $DEFAULT

JAVACMD=/usr/bin/java
LS_HOME=/usr/share/logstash
LS_SETTINGS_DIR=/etc/logstash
LS_CONF_PATH=/etc/logstash/pipeline
LS_LOGS_PATH=/var/log/logstash
LS_LOGS_FILE=${LS_LOGS_PATH}/${NAME}-plain.log
LS_JAVA_OPTS=""
LS_PIDFILE=/var/run/logstash.pid
LS_USER=logstash
LS_GROUP=logstash
LS_GC_LOG_FILE=/var/log/logstash/gc.log
LS_OPEN_FILES=16384
LS_NICE=19
SERVICE_NAME="logstash"
SERVICE_DESCRIPTION="logstash"

# End of variables that can be overwritten in $DEFAULT

# overwrite settings from default file
if [ -f "$DEFAULT" ]; then
	. "$DEFAULT"
fi

# Define other required variables
LS_EXEC=$LS_HOME/bin/logstash
#LS_EXEC_OPTS="--path.settings ${LS_SETTINGS_DIR} --path.config ${LS_CONF_PATH} --path.logs ${LS_LOGS_PATH}"
LS_EXEC_OPTS="--path.settings ${LS_SETTINGS_DIR}"

export LS_JAVA_OPTS
export LS_HOME
export LS_SETTINGS_DIR

if [ ! -x "$LS_EXEC" ]; then
	echo "The logstash startup script does not exists or it is not executable, tried: $LS_EXEC"
	exit 1
fi

touch ${LS_LOGS_FILE}
chown ${LS_USER}:${LS_GROUP} ${LS_LOGS_FILE}

checkJava() {
    if [ -x "$JAVACMD" ]; then
        JAVA="$JAVACMD"
    else
        JAVA=`which java`
    fi

    if [ ! -x "$JAVA" ]; then
        echo "Could not find any executable java binary. Please install java in your PATH or set JAVACMD"
        exit 1
    fi
}

start() {
	checkJava

	echo "Starting $NAME"

	if [ -n "$LS_PIDFILE" ] && [ ! -e "$LS_PIDFILE" ]; then
		touch "$LS_PIDFILE" && chown logstash:logstash "$LS_PIDFILE"
	fi

	if [ -n "$LS_OPEN_FILES" ]; then
		ulimit -n $LS_OPEN_FILES
	fi

	# Start Service
	nice -n$LS_NICE chroot --userspec $LS_USER:$LS_GROUP / sh -c "
        cd $LS_HOME
        ulimit -n ${LS_OPEN_FILES}
        exec $LS_EXEC $LS_EXEC_OPTS
    " &

  # Generate the pidfile from here. If we instead made the forked process
  # generate it there will be a race condition between the pidfile writing
  # and a process possibly asking for status.
  echo $! > $LS_PIDFILE

  echo "$NAME started."
  return 0
}

stop() {
  # Try a few times to kill TERM the program
  if status; then
    pid=$(cat "$LS_PIDFILE")
    echo "Killing $NAME (pid $pid) with SIGTERM"
    kill -TERM $pid
    # Wait for it to exit.
    for i in 1 2 3 4 5; do
      echo "Waiting for $NAME (pid $pid) to die..."
      status || break
      sleep 1
    done
    if status; then
      echo "$NAME stop failed; still running."
    else
      echo "$NAME stopped."
      rm -f $LS_PIDFILE
    fi
  fi
}

status() {
  if [ -f "$LS_PIDFILE" ] ; then
    pid=$(cat "$LS_PIDFILE")
    if kill -0 $pid > /dev/null 2> /dev/null; then
      # process by this pid is running.
      # It may not be our pid, but that's what you get with just pidfiles.
      # TODO(sissel): Check if this process seems to be the same as the one we
      # expect. It'd be nice to use flock here, but flock uses fork, not exec,
      # so it makes it quite awkward to use in this case.
      return 0
    else
      return 2 # program is dead but pid file exists
    fi
  else
    return 3 # program is not running
  fi
}

force_stop() {
  if status; then
    stop
    status && kill -KILL $(cat "$LS_PIDFILE")
    rm -f $LS_PIDFILE
  fi
}

case "$1" in
  start)
    status
    code=$?
    if [ $code -eq 0 ]; then
      echo "$NAME is already running"
    else
      start
      code=$?
    fi
    exit $code
    ;;

  stop) stop ;;

  force-stop) force_stop ;;

  status)
    status
    code=$?
    if [ $code -eq 0 ]; then
      echo "$NAME is running"
    else
      echo "$NAME is not running"
    fi
    exit $code
    ;;

  restart) stop && start ;;

  *)
    echo "Usage: $SCRIPTNAME {start|stop|force-stop|status|restart}" >&2
    exit 3
    ;;
esac

exit $?

